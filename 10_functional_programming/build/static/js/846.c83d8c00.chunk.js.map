{"version":3,"file":"static/js/846.c83d8c00.chunk.js","mappings":"oKAgCA,UApBgB,WAId,OAA4BA,EAAAA,EAAAA,UAAS,GAArC,eAAQC,EAAR,KAAeC,EAAf,KAQA,OACE,iCACE,mBAAQC,QALM,WAChBD,EAASD,EAAQ,EAClB,EAGG,gBACA,wBAAKA,MAGV,C","sources":["050_react_data_procedure/end/Example.js"],"sourcesContent":["import { useState } from \"react\";\n\n/* \nPOINT Reactでの状態管理(state)と処理(関数コンポーネント)の分離\n\n関数型（純粋関数）\n・fn(決まった引数) : propsとstateに依存\n  -> 決まった戻り値 : JSX\n*/\n\n// ・関数外の状態（データ）は参照・変更しない。\nlet value = 0;\nconst Example = () => {\n  // 関数コンポーネントはJSXを作成する場所なので、それ以外の処理は書かない。\n\n  // 状態はstateに分離する\n  const [ state, setState ] = useState(0);\n  \n  // 関数外に影響を及ぼさない。\n  // window.alert('hello')\n\n  const increment = () => {\n    setState(state + 1);\n  }\n  return (\n    <>\n      <button onClick={increment}>+</button>\n      <h3>{state}</h3>\n    </>\n  );\n};\n\nexport default Example;\n"],"names":["useState","state","setState","onClick"],"sourceRoot":""}