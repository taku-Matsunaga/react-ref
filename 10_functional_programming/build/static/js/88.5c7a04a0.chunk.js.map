{"version":3,"file":"static/js/88.5c7a04a0.chunk.js","mappings":"gJA0BA,UA1BgB,WAQd,IAAMA,EAAM,CAAEC,IAAK,GAQbC,EANS,SAACF,GAGd,MAFe,CAAEC,IAAe,EAAVD,EAAIC,IAG3B,CAEcE,CAAOH,GAGtB,OAFAI,QAAQC,IAAI,SAAUH,EAAQ,MAAOF,GACrCI,QAAQC,IAAIH,IAAWF,IAErB,+BACE,2CAGL,C","sources":["030_immutability/end/Example.js"],"sourcesContent":["const Example = () => {\n  // 関数型（純粋関数）\n  // ・fn(決まった引数) -> 決まった戻り値\n  // ・関数外の状態（データ）は参照・変更しない。\n  // ・関数外に影響を及ぼさない。\n  // POINT 引数で渡された値を変更しない。（Immutabilityの保持）\n  // 上記の要件を満たさない操作は「副作用」と呼ぶ。\n\n  const num = { val: 2 }\n  \n  const double = (num) => {\n    const newNum = { val: num.val * 2 };\n    // newNum.val = num.val * 2;\n    return newNum;\n  }\n\n  const newNum = double(num);\n  console.log('newNum', newNum, 'num', num)\n  console.log(newNum === num);\n  return (\n    <>\n      <div>Immutability</div>\n    </>\n  );\n};\n\nexport default Example;\n"],"names":["num","val","newNum","double","console","log"],"sourceRoot":""}